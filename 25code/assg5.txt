#include <iostream> 
#include <vector> 
using namespace std; 
bool isSafeState(const vector<vector<int>>& maxDemand
const vector<vector<int>>& allocation, 
const vector<int>& available, int numProcesses, int numResources, vector<int>& safeSequence) { 
vector<int> work = available; 
vector<bool> finish(numProcesses, false); 
 int count = 0; 
 while (count < numProcesses) { 
 bool found = false; for (int i = 
0; i < numProcesses; ++i) { 
 if (!finish[i]) { 
 bool canAllocate = true; 
for (int j = 0; j < numResources; ++j) { 
if (maxDemand[i][j] - allocation[i][j] > work[j]) { 
canAllocate = false; 
 break; 
 } 
} 
 if (!found) 
break; 
 vector<vector<int>> maxDemand(numProcesses, vector<int>(numResources)); 
cout << "Enter the maximum demand of each process:" << endl; 
 for (int i = 0; i < numProcesses; ++i) { 
cout << "For process " << i << ": "; 
 for (int j = 0; j < numResources; ++j) 
cin >> maxDemand[i][j]; 
 } 
 vector<vector<int>> allocation(numProcesses, vector<int>(numResources)); 
cout << "Enter the current allocation of resources to each process:" << endl; 
for (int i = 0; i < numProcesses; ++i) { 
cout << "For process " << i << ": "; 
for (int j = 0; j < numResources; ++j) 
 cin >> allocation[i][j]; 
 } 
 vector<int> available(numResources); 
cout << "Enter the available instances of each resource: "; 
for (int i = 0; i < numResources; ++i) 
cin >> available[i]; 
if (isSafeState(maxDemand, allocation, available, numProcesses, numResources, safeSequence)) {
cout << "System is in a safe state. Safe sequence: "; 
for(int i = 0; i < safeSequence.size(); ++i) { 
cout << safeSequence[i]; 
if (i < safeSequence.size() - 1) 
cout << " -> "; 
 } 
 cout << endl; 
 } else { 
 cout << "System is not in a safe state." << endl; 
 } 
 return 0; 
} 