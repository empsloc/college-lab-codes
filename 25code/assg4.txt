#include <stdio.h> 
#include <pthread.h> 
#include <unistd.h> 
 
#define NUM_READERS 5 
#define NUM_WRITERS 5 
#define MAX_EXECUTIONS 5 
 
int shared_variable = 0; 
pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER; pthread_cond_t readers_condition = PTHREAD_COND_INITIALIZER; pthread_cond_t writers_condition = PTHREAD_COND_INITIALIZER; 
int reader_executions = 0; int writer_executions = 0; 
 
void* reader(void* arg) { 
    int id = *((int*)arg); 
    while (reader_executions < MAX_EXECUTIONS)  
    { 
       printf("Reader %d reads: %d\n", id, shared_variable);         reader_executions++; 
        sleep(1);   
    } 
    return NULL; 
} 
 
void* writer(void* arg) { 
    int id = *((int*)arg); 
    while (writer_executions < MAX_EXECUTIONS)  
    { 
        shared_variable++;         printf("Writer %d writes: %d\n", id, shared_variable);         writer_executions++; 
        sleep(1);  
    } 
    return NULL; 
} 
 
int main() { 
    pthread_t readers[NUM_READERS];     pthread_t writers[NUM_WRITERS];     int reader_ids[NUM_READERS];     int writer_ids[NUM_WRITERS]; 
 
    for (int i = 0; i < NUM_READERS; i++) { 
        reader_ids[i] = i + 1; 
        pthread_create(&readers[i], NULL, reader, &reader_ids[i]); 
    } 
 
    for (int i = 0; i < NUM_WRITERS; i++) { 
        writer_ids[i] = i + 1; 
        pthread_create(&writers[i], NULL, writer, &writer_ids[i]); 
    } 
 
    for (int i = 0; i < NUM_READERS; i++) {         pthread_join(readers[i], NULL); 
    } 
    for (int i = 0; i < NUM_WRITERS; i++) {         pthread_join(writers[i], NULL); 
    } 
 
    return 0; 
} 



#include <pthread.h> 
#include <semaphore.h> 
#include <stdio.h> 
 
sem_t wrt; pthread_mutex_t mutex; int balance = 1000; // Initial balance 
 
void *credit(void *cno) {     sem_wait(&wrt); 
    balance += 100; // Credit operation 
    printf("Credit %d: New balance is %d\n", (*((int *)cno)), balance);     sem_post(&wrt); 
} 
 
void *debit(void *dno) {     sem_wait(&wrt); 
    balance -= 100; // Debit operation 
    printf("Debit %d: New balance is %d\n", (*((int *)dno)), balance);     sem_post(&wrt); 
} 
 
void *reader(void *rno) {     pthread_mutex_lock(&mutex); 
    printf("Reader %d: Current balance is %d\n", (*((int *)rno)), balance); 
    pthread_mutex_unlock(&mutex); 
} 
 
int main() {     pthread_t readers[5], writers[5];     pthread_mutex_init(&mutex, NULL); 
    sem_init(&wrt, 0, 1); 
 
    int rids[5] = {1, 2, 3, 4, 5}; // Reader IDs 
    int wids[5] = {1, 2, 3, 4, 5}; // Writer IDs 
 
    for (int i = 0; i < 5; i++) { 
        pthread_create(&readers[i], NULL, reader, &rids[i]);         pthread_create(&writers[i], NULL, credit, &wids[i]); 
    } 
 
    for (int i = 0; i < 5; i++) {         pthread_join(readers[i], NULL);         pthread_join(writers[i], NULL); 
    } 
 
    pthread_mutex_destroy(&mutex);     sem_destroy(&wrt); 
 
    return 0; } 




