#include <stdio.h> 
#define MAX_BLOCKS 100 
#define MAX_PROCESS 100 
void firstFit(int blockSize[], int m, int processSize[], int n) { 
int allocation[n]; for (int i = 0; i < n; i++) { 
allocation[i] = -1; for (int j = 0; j < m; j++) { if 
(blockSize[j] >= processSize[i]) { allocation[i] = 
j; blockSize[j] -= processSize[i]; 
 break; 
 } 
 } 
 } 
 printf("\nProcess No.\tProcess Size\tBlock no.\n"); 
for (int i = 0; i < n; i++) { 
 printf("%d\t\t%d\t\t", i+1, processSize[i]); 
 if (allocation[i] != -1) 
printf("%d\n", allocation[i] + 1); 
 else 
 printf("Not Allocated\n"); 
 } 
} 
void bestFit(int blockSize[], int m, int processSize[], int n) { 
int allocation[n]; for (int i = 0; i < n; i++) { 
allocation[i] = -1; int bestIdx = -1; for (int j = 0; j 
< m; j++) { if (blockSize[j] >= processSize[i]) { 
 if (bestIdx == -1 || blockSize[j] < blockSize[bestIdx]) 
bestIdx = j; 
 } 
 } 
 if (bestIdx != -1) { 
allocation[i] = bestIdx; 
 blockSize[bestIdx] -= processSize[i]; 
 } 
 } 
void nextFit(int blockSize[], int m, int processSize[], int n) { 
int allocation[n]; int lastIndex = 0; for (int i = 0; i < n; 
i++) { allocation[i] = -1; for (int j = lastIndex; j < 
m; j++) { if (blockSize[j] >= processSize[i]) { 
allocation[i] = j; blockSize[j] -= processSize[i]; 
 lastIndex = j; 
break; 
 } 
 } 
 } 
 printf("\nProcess No.\tProcess Size\tBlock no.\n"); 
for (int i = 0; i < n; i++) { 
 printf("%d\t\t%d\t\t", i+1, processSize[i]); 
 if (allocation[i] != -1) 
printf("%d\n", allocation[i] + 1); 
 else 
 printf("Not Allocated\n"); 
 } 
} 
void worstFit(int blockSize[], int m, int processSize[], int n) { 
int allocation[n]; for (int i = 0; i < n; i++) { 
allocation[i] = -1; int worstIdx = -1; for (int j = 0; j 
< m; j++) { if (blockSize[j] >= processSize[i]) { 
 if (worstIdx == -1 || blockSize[j] > blockSize[worstIdx]) 
worstIdx = j; 
 } 
 } 
int main() { 
 printf("Enter the number of processes: "); 
scanf("%d", &n); 
 printf("Enter the size of each process:\n"); 
 for (int i = 0; i < n; i++) { 
 scanf("%d", &processSize[i]); 
 } 
 printf("\nFirst Fit:\n"); 
 firstFit(blockSize, m, processSize, n); 
 printf("\nBest Fit:\n"); 
 bestFit(blockSize, m, processSize, n); 
 printf("\nNext Fit:\n"); 
 nextFit(blockSize, m, processSize, n); 
 printf("\nWorst Fit:\n"); 
 worstFit(blockSize, m, processSize, n); 
 return 0; 
} 