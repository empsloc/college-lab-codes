#include <iostream>
using namespace std;
// Function to find the waiting time for all
// processes
void findWaitingTime(int processes[], int n,
int bt[], int wt[])
{
    // waiting time for first process is 0
    wt[0] = 0;
    // calculating waiting time
    for (int i = 1; i < n; i++)
        wt[i] = bt[i - 1] + wt[i - 1];
}
// Function to calculate turn around time
void findTurnAroundTime(int processes[], int n,
                        int bt[], int wt[], int tat[])
{
    // calculating turnaround time by adding
    // bt[i] + wt[i]
    for (int i = 0; i < n; i++)
        tat[i] = bt[i] + wt[i];
}
// Function to calculate average time
void findavgTime(int processes[], int n, int bt[])
{
    int wt[n], tat[n], total_wt = 0, total_tat = 0;
    // Function to find waiting time of all processes
    findWaitingTime(processes, n, bt, wt);
    // Function to find turn around time for all processes
    findTurnAroundTime(processes, n, bt, wt, tat);

    // Display processes along with all details
    cout << "Processes  "
         << " Burst time  "
         << " Waiting time  "
         << " Turn around time\n";

    // Calculate total waiting time and total turn
    // around time
    for (int i = 0; i < n; i++)
    {
        total_wt = total_wt + wt[i];
        total_tat = total_tat + tat[i];
        cout << "   " << i + 1 << "\t\t" << bt[i] << "\t    "
             << wt[i] << "\t\t  " << tat[i] << endl;
    }

    cout << "Average waiting time = "
         << (float)total_wt / (float)n;
    cout << "\nAverage turn around time = "
         << (float)total_tat / (float)n;
}

// Driver code
int main()
{ // process id's
    int processes[] = {1, 2, 3};
    int n = sizeof processes / sizeof processes[0];
    // Burst time of all processes
    int burst_time[] = {10, 5, 8};
    findavgTime(processes, n, burst_time);
    return 0;
}


#include <iostream>
using namespace std;
int main()
{
    // Matrix for storing Process Id, Burst
    // Time, Average Waiting Time & Average
    // Turn Around Time.
    int A[100][4];
    int i, j, n, total = 0, index, temp;
    float avg_wt, avg_tat;

    cout << "Enter number of process: ";
    cin >> n;

    cout << "Enter Burst Time:" << endl;

    // User Input Burst Time and alloting Process Id.
    for (i = 0; i < n; i++)
    {
        cout << "P" << i + 1 << ": ";
        cin >> A[i][1];
        A[i][0] = i + 1;
    }

    // Sorting process according to their Burst Time.
    for (i = 0; i < n; i++)
    {
        index = i;
        for (j = i + 1; j < n; j++)
            if (A[j][1] < A[index][1])
                index = j;
        temp = A[i][1];
        A[i][1] = A[index][1];
        A[index][1] = temp;

        temp = A[i][0];
        A[i][0] = A[index][0];
        A[index][0] = temp;
    }

    A[0][2] = 0;
    // Calculation of Waiting Times
    for (i = 1; i < n; i++)
    {
        A[i][2] = 0;
        for (j = 0; j < i; j++)
            A[i][2] += A[j][1];
        total += A[i][2];
    }

    avg_wt = (float)total / n;
    total = 0;
    cout << "P     BT     WT     TAT" << endl;

    // Calculation of Turn Around Time and printing the
    // data.
    for (i = 0; i < n; i++)
    {
        A[i][3] = A[i][1] + A[i][2];
        total += A[i][3];
        cout << "P" << A[i][0] << "     " << A[i][1] << "     " << A[i][2] << "      " << A[i][3] << endl;
    }

    avg_tat = (float)total / n;
    cout << "Average Waiting Time= " << avg_wt << endl;
    cout << "Average Turnaround Time= " << avg_tat << endl;
}


#include <iostream>
using namespace std;
// Function to find the waiting time for all
// processes
void findWaitingTime(int processes[], int n,
                     int bt[], int wt[], int quantum)
{ // Make a copy of burst times bt[] to store remaining
    // burst times.
    int rem_bt[n];
    for (int i = 0; i < n; i++)
        rem_bt[i] = bt[i];
    int t = 0; // Current time
    // Keep traversing processes in round robin manner
    // until all of them are not done.
    while (1)
    {
        bool done = true;
        // Traverse all processes one by one repeatedly
        for (int i = 0; i < n; i++)
        {
            // If burst time of a process is greater than 0
            // then only need to process further
            if (rem_bt[i] > 0)
            {
                done = false; // There is a pending process

                if (rem_bt[i] > quantum)
                {
                    // Increase the value of t i.e. shows
                    // how much time a process has been processed
                    t += quantum;

                    // Decrease the burst_time of current process
                    // by quantum
                    rem_bt[i] -= quantum;
                }

                // If burst time is smaller than or equal to
                // quantum. Last cycle for this process
                else
                {
                    // Increase the value of t i.e. shows
                    // how much time a process has been processed
                    t = t + rem_bt[i];
                    // Waiting time is current time minus time
                    // used by this process
                    wt[i] = t - bt[i];
                    // As the process gets fully executed
                    // make its remaining burst time = 0
                    rem_bt[i] = 0;
                }
            }
        }
        // If all processes are done
        if (done == true)
            break;
    }
}
// Function to calculate turn around time
void findTurnAroundTime(int processes[], int n,
                        int bt[], int wt[], int tat[])
{ // calculating turnaround time by adding
    // bt[i] + wt[i]
    for (int i = 0; i < n; i++)
        tat[i] = bt[i] + wt[i];
}
// Function to calculate average time
void findavgTime(int processes[], int n, int bt[],
                 int quantum)
{
    int wt[n], tat[n], total_wt = 0, total_tat = 0;
    // Function to find waiting time of all processes
    findWaitingTime(processes, n, bt, wt, quantum);
    // Function to find turn around time for all processes
    findTurnAroundTime(processes, n, bt, wt, tat);
    // Display processes along with all details
    cout << "PN\t "
         << " \tBT "
         << "  WT "
         << " \tTAT\n";
    // Calculate total waiting time and total turn
    // around time
    for (int i = 0; i < n; i++)
    {
        total_wt = total_wt + wt[i];
        total_tat = total_tat + tat[i];
        cout << " " << i + 1 << "\t\t" << bt[i] << "\t "
             << wt[i] << "\t\t " << tat[i] << endl;
    }
    cout << "Average waiting time = "
         << (float)total_wt / (float)n;
    cout << "\nAverage turn around time = "
         << (float)total_tat / (float)n;
}
int main()
{ // process id's
    int processes[] = {1, 2, 3};
    int n = sizeof processes / sizeof processes[0];
    // Burst time of all processes
    int burst_time[] = {10, 5, 8};
    // Time quantum
    int quantum = 2;
    findavgTime(processes, n, burst_time, quantum);
    return 0;
}



#include <bits/stdc++.h>
using namespace std;
#define totalprocess 4
// Making a struct to hold the given input
struct process
{
    int at, bt, pr, pno;
};
process proc[50];

    bool comp(process a, process b)
{
    if (a.at == b.at)
    {
        return a.pr < b.pr;
    }
    else
    {
        return a.at < b.at;
    }
}
// Using FCFS Algorithm to find Waiting time
void get_wt_time(int wt[])
{
    // declaring service array that stores cumulative burst time
    int service[50];
    // Initialising initial elements of the arrays
    service[0] = proc[0].at;
    wt[0] = 0;
    for (int i = 1; i < totalprocess; i++)
    {
        service[i] = proc[i - 1].bt + service[i - 1];
        wt[i] = service[i] - proc[i].at;
        // If waiting time is negative, change it into zero
        if (wt[i] < 0)
        {
            wt[i] = 0;
        }
    }
}
void get_tat_time(int tat[], int wt[])
{ // Filling turnaroundtime array
    for (int i = 0; i < totalprocess; i++)
    {
        tat[i] = proc[i].bt + wt[i];
    }
}
void findgc()
{
    // Declare waiting time and turnaround time array
    int wt[50], tat[50];

    double wavg = 0, tavg = 0;
    // Function call to find waiting time array
    get_wt_time(wt);
    // Function call to find turnaround time
    get_tat_time(tat, wt);
    int stime[50], ctime[50];
    stime[0] = proc[0].at;
    ctime[0] = stime[0] + tat[0];

    // calculating starting and ending time
    for (int i = 1; i < totalprocess; i++)
    {
        stime[i] = ctime[i - 1];
        ctime[i] = stime[i] + tat[i] - wt[i];
    }
    cout << "Process_no\tStart_time\tComplete_time\tTurn_Around_Time\tWaiting_Time" << endl;
    // display the process details

    for (int i = 0; i < totalprocess; i++)
    {
        wavg += wt[i];
        tavg += tat[i];
        cout << proc[i].pno << "\t\t" << stime[i] << "\t\t" << ctime[i] << "\t\t" << tat[i] << "\t\t\t" << wt[i] << endl;
    }
    // display the average waiting time
    // and average turn around time

    cout << "Average waiting time is : ";
    cout << wavg / (float)totalprocess << endl;
    cout << "average turnaround time : ";
    cout << tavg / (float)totalprocess << endl;
}
int main()
{
    int arrivaltime[] = {0, 1, 2, 4};
    int bursttime[] = {5,4,2,1};
    int priority[] = {10,20,30,40};
    for (int i = 0; i < totalprocess; i++)
    {
        proc[i].at = arrivaltime[i];
        proc[i].bt = bursttime[i];
        proc[i].pr = priority[i];
        proc[i].pno = i + 1;
    }
    // Using inbuilt sort function
    sort(proc, proc + totalprocess, comp);
    // Calling function findgc for finding Gantt Chart
    findgc();
    return 0;
}