Ass - 3

// send msg from parent to child process

#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main(){
    int fd[2], n, status;
    char buffer[100];
    pid_t p;
    pipe(fd);
    p = fork();
    if (p > 0){
        printf("Parent Passing value to child\n");
        write(fd[1], "This is Me\n", 13);
        wait(&status);
    }
    else{
        printf("Child printing received value\n");
        n = read(fd[0], buffer, 100);
        write(1, buffer, n);
    }
}

// read and write two msg using pipe

#include <stdio.h>
#include <unistd.h>

int main(){
    int piperw[2];
    int returnstatus;
    char w[2][40] = {"Hi", "This is Me"};
    char r[40];

    returnstatus = pipe(piperw);

    if (returnstatus == -1){
        printf("Unable to create pipe\n");
        return 1;
    }

        printf("Writing to pipe Message 1 is %s\n", w[0]);
        write(piperw[1], w[0], sizeof(w[0]));
        read(piperw[0], r, sizeof(r));

        printf("Reading from pipe Message 1 is %s\n", r);
        printf("Writing to pipe Message 2 is %s\n", w[0]);

        write(piperw[1], w[1], sizeof(w[1]));
        read(piperw[0], r, sizeof(r));

        printf("Reading from pipe Message 2 is %s\n", r);
        return 0;
}

// Two-way Com using pipes

#include <stdio.h>
#include <unistd.h>

int main() {
    int pipefdsl[2], pipefds2[2];
    int returnstatus1, returnstatus2;
    int pid;
    char w1[40] = "Hi";
    char w2[40] = "This is Me";
    char r[40];

    returnstatus1 = pipe(pipefdsl);
    if (returnstatus1 == -1) {
        printf("Unable to create pipe 1\n");
        return 1;
    }

    returnstatus2 = pipe(pipefds2);
    if (returnstatus2 == -1) {
        printf("Unable to create pipe 2\n");
        return 1;
    }
    pid = fork();
    if (pid != 0) {
        close(pipefdsl[0]);
        close(pipefds2[1]);

        printf("In Parent: Writing to pipe 1 Message is %s\n", w1);
        write(pipefdsl[1], w1, sizeof(w1));

        read(pipefds2[0], r, sizeof(r));
        printf("In Parent: Reading from pipe 2 Message is %s\n", r);
    } else {
        close(pipefdsl[1]);
        close(pipefds2[0]);

        read(pipefdsl[0], r, sizeof(r));
        printf("In Child: Reading from pipe 1 Message is %s\n", r);

        printf("In Child: Writing to pipe 2 Message is %s\n", w2);
        write(pipefds2[1], w2, sizeof(w2));
    }
    return 0;
}


// Fork() and Pipe()

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

int main() {
    int fd1[2];
    int fd2[2];
    char fixed_str[] = "Tesla";
    char input_str[100];
    pid_t p;

    if (pipe(fd1) == -1) {
        fprintf(stderr, "Pipe Failed\n");
        return 1;
    }

    if (pipe(fd2) == -1) {
        fprintf(stderr, "Pipe Failed\n");
        return 1;
    }

    printf("Enter the input string: ");
    scanf("%s", input_str);

    p = fork();

    if (p < 0) {
        fprintf(stderr, "fork Failed\n");
        return 1;
    } else if (p > 0) {
        char concat_str[100];
        close(fd1[0]);
        write(fd1[1], input_str, strlen(input_str) + 1);
        close(fd1[1]);
        wait(NULL);
        close(fd2[1]);
        read(fd2[0], concat_str, 100);
        printf("Concatenated string: %s\n", concat_str);
        close(fd2[0]);
    } else {
        close(fd1[1]);
        char concat_str[100];
        read(fd1[0], concat_str, 100);
        int k = strlen(concat_str);
        int i;
        for (i = 0; i < strlen(fixed_str); i++)
            concat_str[k++] = fixed_str[i];
        concat_str[k] = '\0';
        close(fd1[0]);
        close(fd2[0]);
        write(fd2[1], concat_str, strlen(concat_str) + 1);
        close(fd2[1]);
        exit(0);
    }

    return 0;
}

