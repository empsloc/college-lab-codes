Ass - 6

#include <iostream>
#include <vector>

using namespace std;

void firstFit(vector<int>& blockSize, int m, vector<int>& processSize, int n) {
    vector<int> allocation(n, -1);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (blockSize[j] >= processSize[i]) {
                allocation[i] = j;
                blockSize[j] -= processSize[i];
                break;
            }
        }
    }
    cout << "\nFirst Fit\n";
    cout << " -\n";
    cout << "\nProcess\tProcess Size\tBlock no.\n";
    for (int i = 0; i < n; i++) {
        cout << "P[" << i + 1 << "]\t\t" << processSize[i] << "\t\t";
        if (allocation[i] != -1)
            cout << allocation[i] + 1 << endl;
        else
            cout << "Not Allocated\n";
    }
}

void bestFit(vector<int>& blockSize, int blocks, vector<int>& processSize, int processes) {
    vector<int> allocation(processes, -1);
    for (int i = 0; i < processes; i++) {
        int indexPlaced = -1;
        for (int j = 0; j < blocks; j++) {
            if (blockSize[j] >= processSize[i]) {
                if (indexPlaced == -1 || blockSize[j] < blockSize[indexPlaced])
                    indexPlaced = j;
            }
        }
        if (indexPlaced != -1) {
            allocation[i] = indexPlaced;
            blockSize[indexPlaced] -= processSize[i];
        }
    }
    cout << "\nBest Fit\n";
    cout << " -\n";
    cout << "\nProcess\tProcess Size\tBlock no.\n";
    for (int i = 0; i < processes; i++) {
        cout << "P[" << i + 1 << "]\t\t" << processSize[i] << "\t\t";
        if (allocation[i] != -1)
            cout << allocation[i] + 1 << endl;
        else
            cout << "Not Allocated\n";
    }
}

void worstFit(vector<int>& blockSize, int blocks, vector<int>& processSize, int processes) {
    vector<int> allocation(processes, -1);
    for (int i = 0; i < processes; i++) {
        int indexPlaced = -1;
        for (int j = 0; j < blocks; j++) {
            if (blockSize[j] >= processSize[i]) {
                if (indexPlaced == -1 || blockSize[j] > blockSize[indexPlaced])
                    indexPlaced = j;
            }
        }
        if (indexPlaced != -1) {
            allocation[i] = indexPlaced;
            blockSize[indexPlaced] -= processSize[i];
        }
    }
    cout << "\nWorst Fit\n";
    cout << " -\n";
    cout << "\nProcess\tProcess Size\tBlock no.\n";
    for (int i = 0; i < processes; i++) {
        cout << "P[" << i + 1 << "]\t\t" << processSize[i] << "\t\t";
        if (allocation[i] != -1)
            cout << allocation[i] + 1 << endl;
        else
            cout << "Not Allocated\n";
    }
}

void nextFit(vector<int>& blockSize, int m, vector<int>& processSize, int n) {
    vector<int> allocation(n, -1);
    int j = 0;
    for (int i = 0; i < n; i++) {
        int count = 0;
        while (count < m) {
            if (blockSize[j] >= processSize[i]) {
                allocation[i] = j;
                blockSize[j] -= processSize[i];
                break;
            }
            j = (j + 1) % m;
            count += 1;
        }
    }
    cout << "\nNext Fit\n";
    cout << " -\n";
    cout << "\nProcess\tProcess Size\tBlock no.\n";
    for (int i = 0; i < n; i++) {
        cout << "P[" << i + 1 << "]\t\t" << processSize[i] << "\t\t";
        if (allocation[i] != -1)
            cout << allocation[i] + 1 << endl;
        else
            cout << "Not Allocated\n";
    }
}

int main() {
    int blocks, processes;
    cout << "Enter number of blocks: ";
    cin >> blocks;
    cout << "Enter number of processes: ";
    cin >> processes;
    vector<int> blockSize(blocks);
    vector<int> processSize(processes);
    cout << "Enter block sizes: ";
    for (int i = 0; i < blocks; i++) {
        cin >> blockSize[i];
    }
    cout << "Enter process sizes: ";
    for (int i = 0; i < processes; i++) {
        cin >> processSize[i];
    }

    vector<int> blockSizeCopy1 = blockSize;
    firstFit(blockSizeCopy1, blocks, processSize, processes);

    vector<int> blockSizeCopy2 = blockSize;
    bestFit(blockSizeCopy2, blocks, processSize, processes);

    vector<int> blockSizeCopy3 = blockSize;
    worstFit(blockSizeCopy3, blocks, processSize, processes);

    vector<int> blockSizeCopy4 = blockSize;
    nextFit(blockSizeCopy4, blocks, processSize, processes);

    return 0;
}

/*
input:
Enter number of blocks: 5
Enter number of processes: 4
Enter block sizes: 100 200 300 400 500
Enter process sizes: 212 417 112 426

*/

Ass -5

#include <iostream>
#include <vector>

using namespace std;

bool isSafeState(const vector<vector<int>>& maxDemand, const vector<vector<int>>& allocation, const vector<int>& available, int numProcesses, int numResources, vector<int>& safeSequence) {
    vector<int> work = available;
    vector<bool> finish(numProcesses, false);

    int count = 0;
    while (count < numProcesses) {
        bool found = false;
        for (int i = 0; i < numProcesses; ++i) {
            if (!finish[i]) {
                bool canAllocate = true;
                for (int j = 0; j < numResources; ++j) {
                    if (maxDemand[i][j] - allocation[i][j] > work[j]) {
                        canAllocate = false;
                        break;
                    }
                }
                if (canAllocate) {
                    for (int j = 0; j < numResources; ++j)
                        work[j] += allocation[i][j];
                    safeSequence.push_back(i);
                    finish[i] = true;
                    ++count;
                    found = true;
                }
            }
        }
        if (!found)
            break;
    }
    return count == numProcesses;
}

int main() {
    int numProcesses, numResources;

    cout << "Enter the number of processes: ";
    cin >> numProcesses;
    cout << "Enter the number of resources: ";
    cin >> numResources;

    vector<vector<int>> maxDemand(numProcesses, vector<int>(numResources));
    cout << "Enter the maximum demand of each process:" << endl;
    for (int i = 0; i < numProcesses; ++i) {
        cout << "For process " << i << ": ";
        for (int j = 0; j < numResources; ++j)
            cin >> maxDemand[i][j];
    }

    vector<vector<int>> allocation(numProcesses, vector<int>(numResources));
    cout << "Enter the current allocation of resources to each process:" << endl;
    for (int i = 0; i < numProcesses; ++i) {
        cout << "For process " << i << ": ";
        for (int j = 0; j < numResources; ++j)
            cin >> allocation[i][j];
    }

    vector<int> available(numResources);
    cout << "Enter the available instances of each resource: ";
    for (int i = 0; i < numResources; ++i)
        cin >> available[i];

    vector<int> safeSequence;
    if (isSafeState(maxDemand, allocation, available, numProcesses, numResources, safeSequence)) {
        cout << "System is in a safe state. Safe sequence: ";
        for (int i = 0; i < safeSequence.size(); ++i)
            cout << safeSequence[i] << " ";
        cout << endl;
    } else {
        cout << "System is not in a safe state." << endl;
    }

    return 0;
}

/*
input:
Enter the number of processes: 5
Enter the number of resources: 3

Enter the maximum demand of each process:
For process 0: 7 5 3
For process 1: 3 2 2
For process 2: 9 0 2
For process 3: 2 2 2
For process 4: 4 3 3

Enter the current allocation of resources to each process:
For process 0: 0 1 0
For process 1: 2 0 0
For process 2: 3 0 2
For process 3: 2 1 1
For process 4: 0 0 2

Enter the available instances of each resource: 3 3 2

*/

/*
Enter the number of processes: 3
Enter the number of resources: 2

Enter the maximum demand of each process:
For process 0: 7 5
For process 1: 3 2
For process 2: 9 0

Enter the current allocation of resources to each process:
For process 0: 0 1
For process 1: 2 0
For process 2: 3 0

Enter the available instances of each resource: 3 3

*/